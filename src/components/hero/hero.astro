---
import type { ImageMetadata } from 'astro';
import { Image } from 'astro:assets';
import Markdown from '../utility/markdown.astro';
import Button from '../utility/button.astro';

interface Props {
  heading: {
    heading_text: string;
    color: string;
  };
  subheading: {
    text: string;
    color: string;
  };
  image: {
    imagePath: string;
    altText: string;
    name: string;
    width: number;
    height: number;
  };
  buttons: [
    {
      text: string;
      icon: string;
      link: string;
      borderOnly: boolean;
      backgroundColor: string;
      hoverBrightness: number;
      textColor: string;
    },
  ];
}

const block = Astro.props;
const images = import.meta.glob<{ default: ImageMetadata }>(
  '/src/assets/*.{jpeg,jpg,png,gif}',
  { eager: true }
);

const imageSrc = images[block.image.imagePath]?.default;
const src =
  typeof imageSrc === 'string'
    ? imageSrc.replace(/^\./, '/_cloudcannon')
    : imageSrc ?? block.image.imagePath;

if (!src) {
  throw new Error(
    `"${block.image.imagePath}" does not exist in glob: "src/assets/*.{jpeg,jpg,png,gif}"`
  );
}
---

<section class="hero-container">
  <div class="content">
    <h1 class="heading">{block.heading.heading_text}</h1>
    <div class="subheading-text" style={`color: ${block.subheading.color};`}>
      <Markdown content={block.subheading.text} />
    </div>
    <div class="buttons">
      {
        block.buttons.map((button) => {
          return (
            <Button
              text={button.text}
              icon={button.icon}
              link={button.link}
              borderOnly={button.borderOnly}
              backgroundColor={button.backgroundColor}
              hoverBrightness={button.hoverBrightness}
              textColor={button.textColor}
            />
          );
        })
      }
    </div>
  </div>

  <Image
    class="blob"
    style={`@media only screen and (min-width: 1024px){ width: ${block.image.width}px; height: ${block.image.height}px;}`}
    alt={block.image.altText}
    width={block.image.width}
    height={block.image.height}
    widths={[320, 500, 960, 1280, 1920]}
    sizes={`(max-width: 640px) 320px, (max-width: 960px) 640px, (max-width: 1280px) 960px, 1280px`}
    src={src}
  />
</section>

<style>
  .hero-container {
    display: flex;
    flex-direction: column;
    gap: 20px;
    justify-content: space-between;
    align-items: center;
    padding-block: 48px;
    padding-inline: 24px;
    max-width: 1280px;
    margin-inline: auto;
    overflow: hidden;
  }

  .content h1 {
    font-size: 3.8em;
    line-height: 1em;
    font-weight: 700;
    background: -webkit-linear-gradient(to left, #eee 50%, #333);
    background: linear-gradient(to left, #a0a2ff 50%, #000000);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    position: relative;
    z-index: 10;
  }

  .content {
    display: flex;
    flex-direction: column;
  }

  .subheading-text {
    margin-top: 1rem;
  }

  .buttons {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    max-width: fit-content;
    justify-content: center;
    margin-top: 2rem;
  }
  button {
    padding: 0.75rem 1.2rem;
    border-radius: 20px;
    font-size: 1.25em;
    cursor: pointer;
    transition: all ease-in-out 0.15s;
    align-items: center;
    justify-content: center;
  }
  .btn {
    background: #4384e6;
    color: #fff;
    border: none;
    display: flex;
    gap: 8px;
    padding: 1rem;
  }
  .btn svg {
    width: 1rem;
  }

  .btn:hover {
    background: #0066ff;
  }

  .btn-outline {
    border: 1px solid #0d6efd;
    background: transparent;
    color: #0d6efd;
    margin-left: 5px;
  }

  button i {
    font-size: 0.78em;
  }
  .blob {
    background-size: cover;
    -webkit-background-position: center;
    background-position: center center;
    margin: 20px;
    animation: animate 10s ease-in-out infinite;
    transition: all 1s ease-in-out;
  }

  @media only screen and (min-width: 400px) {
    .buttons {
      flex-direction: row;
    }
  }
  @media only screen and (min-width: 800px) {
    .hero-container {
      flex-direction: row;
      padding-block: 96px;
      padding-inline: 48px;
    }
    .content {
      width: 50%;
    }
    .buttons {
      flex-direction: column;
    }
  }
  @media only screen and (min-width: 1000px) {
    .buttons {
      flex-direction: row;
    }
  }

  @keyframes animate {
    0%,
    100% {
      border-radius: 60% 40% 30% 70% / 60% 30% 70% 40%;
    }
    50% {
      border-radius: 30% 60% 70% 40% / 50% 60% 30% 60%;
    }
  }
</style>
